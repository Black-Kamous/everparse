// A sample message format of 3 messages:
//
//   message ::= Init(requestId, major, minor {major.minor <= 3.1})
//            |  Query(requestId, length, bytes[length])
//            |  Halt(requrestId)


// Message type tags
#define INIT_MSG  0x00000001ul
#define QUERY_MSG 0x00000002ul
#define HALT_MSG  0x00000003ul

UINT32
enum _MessageType {
  INIT_MSG,
  QUERY_MSG,
  HALT_MSG
}

// Init message, with a constraint on version numbers
typedef struct _Init {
  UINT32 requestId;
  UINT32 major { major <= 3 };
  UINT32 minor { minor <= 1 };
} Init, *P_Init;


// Query message, with a variable length payload
typedef struct _Query {
  UINT32 requestId;
  UINT32 queryLength;
  UINT8 payload[queryLength];
} Query, *P_Query;

// Halt message, just an id
typedef struct _Halt {
  UINT32 requestId;
} Halt, *P_Halt;

// Union of the three message types, parameterized by a tag
casetype _MessageUnion(UINT32 tag) {
  switch(tag) {
  case INIT_MSG:
    Init init;
  case QUERY_MSG:
    Query query;
  case HALT_MSG:
    Halt halt;                
  case INIT_MSG:
    Init init;
  case QUERY_MSG:
    Query query;
  case HALT_MSG:
    Halt halt;                
  case INIT_MSG:
    Init init;
  case QUERY_MSG:
    Query query;
  case HALT_MSG:
    Halt halt;                
  }
} MessageUnion, *P_MessageUnion;

// A Message is a tag and a message payload
// FIXME: no longer works because of double fetches
typedef struct _Message {
   UINT32 tag;
   MessageUnion(tag) message;
} Message, *P_Message;

// Messages is a variable length array of flatly allocated variable length messages
entrypoint
typedef struct _Messages (UINT32 size) {
  UINT32 byte_length;
  Message msgs[:byte-size byte_length];
} Messages, *P_MESSAGES;
