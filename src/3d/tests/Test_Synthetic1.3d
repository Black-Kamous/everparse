//Some constants explicitly in u32
#define V2              0x00000002ul
#define V3              3ul
#define V4              0x00000004ul
#define V5              0x5ul
#define V6              0x00000006ul
#define V7              0x00000007ul
#define V8              0x00000008ul
#define V9              0x000009ul

//Some typedefs
typedef UINT32 UINT32_Alias1;
typedef UINT32 UINT32_Alias2;
typedef UINT32 UINT32_Alias3;
typedef UINT32 UINT32_Alias4;
typedef UINT32 UINT32_Alias5;
typedef UINT32 ULONG;
typedef UINT64 ULONG64;

//Struct with a where clause and sizeof
typedef struct _STRUCT_1 (UINT32 Len)
where (Len == sizeof(this))
{
  UINT32_Alias1 f1;
  UINT32        f2;
  UINT32        f3;
  UINT32        f4;
} STRUCT_1;

// Struct with where clause
// -- Field dependence
// -- instantiation of parameterized type
// -- unfolding type alias
typedef struct _STRUCT_2 (UINT32 Len)
where (Len == sizeof(this))
{
  UINT32_Alias3   len;
  STRUCT_1(len)   field_1;
} STRUCT_2;


typedef struct _STRUCT_3 (UINT32 TotalLen)
{
    UINT32_Alias1   f1;
    UINT32_Alias2   f2;
    ULONG           len;
    UINT32          offset
        {
            is_range_okay(TotalLen, offset, len) &&
            offset >= sizeof(this)
        };
    UINT32_Alias4   f4 { f4 == 0 };
    UINT8           buffer[TotalLen - sizeof(this)]
} STRUCT_3;


#define TAG_STRUCT_1 0
#define TAG_STRUCT_2 2
#define TAG_STRUCT_3 3

casetype _UNION_1 (UINT32 Tag, UINT32 TotalLen)
{
 switch (Tag) {
 case TAG_STRUCT_1: STRUCT_1(TotalLen)  struct1;
 case TAG_STRUCT_2: STRUCT_2(TotalLen)  struct2;
 case TAG_STRUCT_3: STRUCT_3(TotalLen)  struct3;
 default: unit empty;
 }
} UNION_1;

entrypoint
typedef struct _CONTAINER_1
{
  UINT32            Tag;
  UINT32            MessageLength
  {
     MessageLength >= sizeof(this)
  };
  UNION_1(Tag, MessageLength - sizeof(this)) union;
} CONTAINER_1;

entrypoint
typedef struct _HEADER (UINT32 PLen,
                        UINT32 HLen,
                        mutable UINT32 *offset1,
                        mutable UINT32 *len1,
                        mutable UINT32 *offset2,
                        mutable UINT32 *len2)
  where (sizeof(this) <= HLen &&
         HLen <= PLen)
{
  UINT32                                  Offset1
      {
          sizeof(this) <= Offset1
      }
      {:on-success
          *offset1 = Offset1;
          return true;
      };
  UINT32                                  Len1
      {
          is_range_okay(PLen, Offset1, Len1)
      }
      {:on-success
          *len1 = Len1;
          return true;
      };
  UINT32                                  Dummy { Dummy == 0 };
  UINT32                                  Offset2
      {:on-success
          *offset2 = Offset2;
          return true;
      };
  UINT32                                  Len2
      {
          if (Offset2 != 0 || Len2 != 0)
          {
              is_range_okay (HLen, Offset2, Len2) &&
              Offset2 >= sizeof(this) &&
              Offset2 + Len2 <= Offset2
          }
      }
      {:on-success
          *len2 = Len2;
          return true;
      };
  UINT32_Alias1                            Dummy2
      {
          Dummy2 == 0
      };
  UINT32                                  Dummy3;
} HEADER;

typedef struct _BITFIELD0(UINT32 Bound)
{
   ULONG bit_0:1;
   ULONG bit_1:1;
   ULONG bit_2:1;
   ULONG bit_3:1;
   ULONG bit_4:1;
   ULONG bit_5_16:11
   {
      bit_5_16 < 2000
   };
   ULONG bit_16_26:10
   {
      bit_16_26 < 2000 &&
      bit_5_16 + bit_16_26 <= Bound
   };
} BITFIELD0;

typedef struct _BITFIELD1(UINT32 Bound)
{
  ULONG    bit0_20:20;
  ULONG    bit20_30:10
  {
        bit0_20 < 80000 &&
        bit20_30 < 800 &&
        bit0_20 + bit20_30 <= Bound
  };
  ULONG    bit30:1;
  ULONG    bit32:1;
} BITFIELD1;

#define CONST1   91
#define CONST2   113

typedef struct _BITFIELD2(UINT32 Bound)
{
  ULONG   bit_0_8:8;
  ULONG   bit_8_16:8
  {
     bit_8_16 <= 220
  }
  ;
  ULONG   bit_16_24:8
  { bit_16_24 == 0 || bit_16_24 * 4 + CONST1 + CONST2 <= Bound };
  ULONG   bit_24_32:8 {
    (bit_24_32 == 0 || ( bit_24_32 * 4 + CONST1 + CONST2 <= Bound ))
    &&
    (bit_16_24 == 0 || ( bit_16_24 * 4 + CONST1 + CONST2 + bit_0_8 <= Bound ))
  };
} BITFIELD2;


#define UNION2_CASE0 0
#define UNION2_CASE1 1
#define UNION2_CASE2 2
#define UNION2_CASE3 3
#define UNION2_CASE4 4
#define UNION2_CASE5 5
#define UNION2_CASE6 6
#define UNION2_CASE7 7
#define UNION2_CASE8 8
#define UNION2_CASE9 9
#define UNION2_CASE10 10
#define UNION2_CASE11 11
#define UNION2_CASE12 12

casetype _UNION2(UINT32 Tag,
                 UINT32 Len,
                 mutable UINT32 *Out0,
                 mutable UINT32 *Out1,
                 mutable UINT32 *Out2)
{
  switch (Tag) {
  case UNION2_CASE0:
    BITFIELD0(Len) bf0
      {:on-success
        *Out0 = bf0;
        return true;
      };

  case UNION2_CASE1:
    BITFIELD1(Len) bf1
      {:on-success
        *Out1 = bf1;
        return true;
      };

  case UNION2_CASE2:
    BITFIELD2(Len) bf2
      {:on-success
        *Out2 = bf2;
        return true;
      };
  }
} UNION2;
