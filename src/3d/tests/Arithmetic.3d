#define MAX_UINT16 0xffff

entrypoint
typedef struct _Test (UINT8 param)
where param < 100uy
{
  UINT8 field1  { field1 < param + 1uy };
  UINT16 field2 { field2 < MAX_UINT16 - (UINT16)field1 };
  UINT32 field3 { field3 < 0xbeefbadd - (UINT32)field2 }
} Test;

entrypoint
typedef struct _Test1 (UINT8 param)
where param < 100uy
{
  UINT8 field1  { field1 < param + 1uy };
  UINT16 field2 { field2 < MAX_UINT16 - field1 };
  UINT32 field3 { field3 < 0xbeefbadd - field2 }
} Test2;

#define Case1 0x02
#define Case2 0x04
#define Case3 0x08
#define Case4 0x10
#define Modifier 0x01

/*
 Exercising all arithmetic operators, and a multi-line comment
   +, -, *, /, %
   &, |, ^, ~
   >>, <<
*/

entrypoint
typedef struct _Test3
{
  UINT8 field1  { field1 == Case1 ||
                  field1 == (Case2 + Case1) };
  UINT16 field2 { field2 == (Case1 | Modifier)  ||
                  field2 == ~(Case2 & Modifier) ||
                  (field2 ^ field1) == 17 ||
                  field2 % field1 == 2
                 };
  UINT32 field3 {
                  field3 == field2 << field1 ||
                  field3 == field2 >> field1 ||
                  field3 == field2 / field1 ||
                  field3 == (UINT32)field2 * field1 ||
                  (field2 >= field1 && field3 == field2 - field1)
                }
} Test3;

// Check that all operators are translated as expected

entrypoint
typedef struct _Check {
   UINT32 a {a == 1};
   UINT32 b_plus {b_plus == a + a};
   UINT32 c_mul  {c_mul == a * a};
   UINT32 d_div  {d_div == a / a};
   UINT32 e_minus {e_minus == a - a};
   UINT32 f_rem   {f_rem == a % a};
   UINT32 h_logand {h_logand == (a & a)};
   UINT32 i_logor {i_logor == (a | a)};
   UINT32 j_logxor {j_logxor == (a ^ a)};
   UINT32 k_lognot {k_lognot == ~a};
   UINT32 k_shr {k_shr == a >> a};
   UINT32 l_shl {l_shl == a << a};
   UINT32 m_not {!(m_not == 17) || l_shl == k_shr};
} Check;

// Big-endian
entrypoint
typedef struct _Test_be {
  UINT32BE x {x < 64};
  UINT32 y {y == x};
  UINT64 z {z == x};
} Test_be;


/*
 * Check narrowing casts
 *
 * Narrowing casts are allowed only if narrowing does not lose any precision
 *   or narrowing cast of x from t1 to t2 is allowed, if x fits in the valid t2 range
 *
 * So in this example, without the `where` clause, verification fails
 */
entrypoint
typedef struct _Test_Narrowing_Cast (UINT64 x)
where (x < MAX_UINT16)
{
  UINT16    f  { f == (UINT16) x };
} Test_Narrowing_Cast;
