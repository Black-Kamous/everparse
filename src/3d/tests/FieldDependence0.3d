typedef struct _t (UINT32 a) {
   UINT32 x;
} t, *pt;

entrypoint
typedef struct _s {
   UINT32 a; //this should be dependent
   t(a) b;
} s, *ps;

casetype _D (UINT32 key) {
  switch (key) {
  case 1:
    UINT16 u16;
  case 2:
    UINT32 u32;
  case 3:
    all_bytes padding3;
  case 4:
    all_zeros padding4;
  }
} D;

entrypoint
typedef struct _s2 {
   UINT16 nondep;
   UINT32 length;
   UINT32 key; //this should be dependent
   D(key) pl[:byte-size-single-element-array-at-most length];
   D(key) pl_array2[:byte-size-single-element-array length];
   D(key) payload;
} s2, *ps2;

// Example: list of tagged unions, the list having a fixed size
// where either all elements exactly fit, or there is a zero terminator
// symbol and padding with zeros beyond that symbol.

casetype _element_payload (UINT32 key) {
  switch (key) {
  case 0:
    all_zeros padding;
  case 1:
    UINT16 u16;
  case 2:
    UINT32 u32;
  }
} element_payload;

typedef struct _element {
  UINT32 key;
  _element_payload(key) pl;
} element;

entrypoint
typedef struct _my_list{
  UINT32  length;
  element list[:byte-size length];
} my_list;
