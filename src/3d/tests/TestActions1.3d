entrypoint typedef struct _t (UINT32 a,
                   mutable UINT32 *out_x,
                   mutable UINT32 *out_xx,
                   mutable UINT32 *out_y) {
   // field `x` of struct `t`
   UINT32 x
    {:on-success
       var i = field_pos;
       *out_x = i;
       return true;
     };
   // field `xx` of struct `t`
   UINT32 xx
    { x <= xx }
    {:on-success
       var i = field_pos;
       *out_xx = i;
       return true;
     };
   // field `y` of struct `t`
   UINT32 y
    { x <= y  && xx <= y }
    {:on-success
      var i = field_pos;
      *out_y = i;
      return true;
    };
} t, *pt;

#define MAX_UINT32 0xffffffff

typedef struct _A (mutable UINT32 *accum)
{
   UINT32 x;
   UINT32 n
    {:on-success
       var a = *accum;
       if ((a < MAX_UINT32 - n))
       {
           *accum = a + n;
           return true;
       }
       else {
           return false;
       }
     };
} A;

typedef struct _B (mutable UINT32 *accum)
{
   UINT32 x;
   UINT32 y
    {:on-success
       var a = *accum;
       if (a > 0)
       {
           *accum = a - 1;
           return true;
       }
       else {
           return false;
       }
     };
} B;


entrypoint
typedef struct _C (UINT32 TotalLength, mutable UINT32 *accum)

{
   UINT16 nA
   {
        TotalLength >= (sizeof(A) * nA)
   };
   A(accum) a[:byte-size (sizeof(A) * nA)];
   B(accum) b[:byte-size (TotalLength - (sizeof(A) * nA))];
   unit check
   {:on-success
       var tmp = *accum;
       return (tmp == 0);
   };
} C;
