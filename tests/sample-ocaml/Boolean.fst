module Boolean

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LPI = LowParse.Spec.AllIntegers
module LT = LowParse.TacLib
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

[@LT.Norm] inline_for_extraction let boolean_enum : LP.enum boolean U8.t =
  [@inline_let] let e = [
    FALSE, 0z;
    TRUE, 1z;
  ] in
  [@inline_let] let _ =
    assert_norm (L.noRepeats (LP.list_map fst e))
  in
  [@inline_let] let _ = 
    assert_norm (L.noRepeats (LP.list_map snd e))
  in e

let boolean_repr_parser = LPI.parse_u8

noextract let boolean_repr_serializer = LPI.serialize_u8

inline_for_extraction let synth_boolean (x: LP.enum_key boolean_enum) : Tot boolean = x

inline_for_extraction let synth_boolean_inv (x: boolean) : Tot (LP.enum_key boolean_enum) =
  [@inline_let] let _ : squash (LP.list_mem x (LP.list_map fst boolean_enum)) =
    _ by (LP.synth_maybe_enum_key_inv_unknown_tac x)
  in
  x

let lemma_synth_boolean_inj () : Lemma
  (LP.synth_injective synth_boolean) = ()

let lemma_synth_boolean_inv () : Lemma
  (LP.synth_inverse synth_boolean synth_boolean_inv) = ()

let parse_boolean_key : LP.parser _ (LP.enum_key boolean_enum) =
  LP.parse_enum_key boolean_repr_parser boolean_enum

noextract let serialize_boolean_key : LP.serializer parse_boolean_key =
  LP.serialize_enum_key boolean_repr_parser boolean_repr_serializer boolean_enum

let boolean_parser : LP.parser _ boolean =
  lemma_synth_boolean_inj ();
  parse_boolean_key `LP.parse_synth` synth_boolean

noextract let boolean_serializer : LP.serializer boolean_parser =
  lemma_synth_boolean_inj ();
  lemma_synth_boolean_inv ();
  LP.serialize_synth _ synth_boolean serialize_boolean_key synth_boolean_inv ()

let boolean_bytesize (x:boolean) : GTot nat = Seq.length (boolean_serializer x)

let boolean_bytesize_eq x = ()
