module Employee_name

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec.Base
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes


inline_for_extraction noextract let min_len = 1
inline_for_extraction noextract let max_len = 255
type employee_name = b:bytes{1 <= length b /\ length b <= 255}

inline_for_extraction noextract let employee_name_parser_kind = LP.strong_parser_kind 2 256 None

val employee_name_parser: LP.parser employee_name_parser_kind employee_name

noextract val employee_name_serializer: LP.serializer employee_name_parser

noextract val employee_name_bytesize (x:employee_name) : GTot nat

noextract val employee_name_bytesize_eq (x:employee_name) : Lemma (employee_name_bytesize x == Seq.length (LP.serialize employee_name_serializer x))
