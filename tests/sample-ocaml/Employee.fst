module Employee

(* This file has been automatically generated by EverParse. *)
open FStar.Bytes
module U8 = FStar.UInt8
module U16 = FStar.UInt16
module U32 = FStar.UInt32
module U64 = FStar.UInt64
module LP = LowParse.Spec
module LPI = LowParse.Spec.AllIntegers
module L = FStar.List.Tot
module BY = FStar.Bytes

#reset-options "--using_facts_from '* -FStar.Tactics -FStar.Reflection' --z3rlimit 16 --z3cliopt smt.arith.nl=false --max_fuel 2 --max_ifuel 2"

(* Type of field name*)
open Employee_name

type employee' = (employee_name & U16.t)

inline_for_extraction let synth_employee (x: employee') : employee =
  match x with (name,salary) -> {
    name = name;
    salary = salary;
  }

inline_for_extraction let synth_employee_recip (x: employee) : employee' = (x.name,x.salary)

let synth_employee_recip_inverse () : Lemma (LP.synth_inverse synth_employee_recip synth_employee) = ()

let synth_employee_injective () : Lemma (LP.synth_injective synth_employee) =
  LP.synth_inverse_synth_injective synth_employee_recip synth_employee;
  synth_employee_recip_inverse ()

let synth_employee_inverse () : Lemma (LP.synth_inverse synth_employee synth_employee_recip) =
  assert_norm (LP.synth_inverse synth_employee synth_employee_recip)

let synth_employee_recip_injective () : Lemma (LP.synth_injective synth_employee_recip) =
  synth_employee_recip_inverse ();
  LP.synth_inverse_synth_injective synth_employee synth_employee_recip

let employee'_parser : LP.parser _ employee' = (employee_name_parser `LP.nondep_then` LPI.parse_u16)

let employee'_parser_kind = LP.get_parser_kind employee'_parser

let employee_parser =
  synth_employee_injective ();
  assert_norm (employee_parser_kind == employee'_parser_kind);
  employee'_parser `LP.parse_synth` synth_employee

noextract let employee'_serializer : LP.serializer employee'_parser = (employee_name_serializer `LP.serialize_nondep_then` LPI.serialize_u16)

let employee_serializer =
  [@inline_let] let _ = synth_employee_injective () in
  [@inline_let] let _ = synth_employee_inverse () in
  [@inline_let] let _ = assert_norm (employee_parser_kind == employee'_parser_kind) in
  LP.serialize_synth _ synth_employee employee'_serializer synth_employee_recip ()

let employee_bytesize (x:employee) : GTot nat = Seq.length (employee_serializer x)

let employee_bytesize_eq x = ()
