/*
ASN payload of RSA PKCS1 v1.5 signature

OID = 30 07 06 05 2b 0e 03 02 1a
Comment = Sha1 (OID 1 3 14 3 2 26)
OID = 30 0b 06 09 60 86 48 01 65 03 04 02 04
Comment = SHA224 (OID 2 16 840 1 101 3 4 2 4)
OID = 30 0b 06 09 60 86 48 01 65 03 04 02 01
Comment = SHA256 (OID 2 16 840 1 101 3 4 2 1)
OID = 30 0b 06 09 60 86 48 01 65 03 04 02 02
Comment = SHA384 (OID 2 16 840 1 101 3 4 2 2)
OID = 30 0b 06 09 60 86 48 01 65 03 04 02 03
Comment = SHA512 (OID 2 16 840 1 101 3 4 2 3)
*/

enum { sha512_len(0x0440), (65535) } sha512_len;

struct {
  sha512_len l;
  opaque sha512_digest[64];
} sha2_512;

enum { sha384_len(0x0430), (65535) } sha384_len;

struct {
  sha384_len l;
  opaque sha384_digest[48];
} sha2_384;

enum { sha256_len(0x0420), (65535) } sha256_len;

struct {
  sha256_len l;
  opaque sha256_digest[32];
} sha2_256;

enum {
  sha2_oid(0x06096086),
  (2^32-1)
} sha2_start;

enum {
  sha2_mid(0x48016503),
  (2^32-1)
} sha2_mid;

enum {
  sha2_end(0x0402),
  (2^16-1)
} sha2_end;

enum {
  sha2_256(0x01),
  sha2_384(0x02),
  sha2_512(0x03),
  (255)
} sha2_version;

struct {
  sha2_start s;
  sha2_mid m;
  sha2_end e;
  sha2_version version;
  select(version){
    case sha2_256: sha2_256;
    case sha2_384: sha2_384;
    case sha2_512: sha2_512;
  } v;
} oid_sha2;

enum {
  sha1_oid(0x06052b0e),
  (2^32-1)
} sha1_prefix;

enum {
  sha1_oid_end(0x03021a04),
  (2^32-1)
} sha1_suffix;

enum {
  sha1_len(0x14),
  (255)
} sha1_len;

struct {
  sha1_prefix s;
  sha1_suffix e;
  sha1_len l;
  opaque sha1_digest[20];
} oid_sha1;

enum {
  start_sha1 (0x3007),
  start_sha2 (0x300b),
  (2^16-1)
} start_oid;

struct {
  start_oid tag;
  select(tag) {
    case start_sha1: oid_sha1;
    case start_sha2: oid_sha2;
  } v;
} oid_payload;

enum {
  struct_tag(0x30),
  (255)
} stag;

struct {
  stag struct_open;
  asn1_len len;
  oid_payload payload [len];
} pkcs1_sig;
